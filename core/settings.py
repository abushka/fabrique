"""
Django settings for notifications project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
from datetime import timedelta
from pathlib import Path
from os import getenv as os_getenv

import dj_database_url
from celery.schedules import crontab
from django.core.exceptions import ImproperlyConfigured
from dotenv import load_dotenv

load_dotenv()


def getenv(key, default=None):
    value = os_getenv(key, default)
    if value == '':
        return default
    if value == 'True':
        return True
    if value == 'False':
        return False
    return value


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = getenv('DJANGO_SECRET_KEY', 'django-insecure-4622bc^uf(h*8ff+2k397e9_-5ucw@7itcnsj*z1f7#d=95d4@')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = getenv('DJANGO_DEBUG', True) is True

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
]

EXTRA_ALLOWED_HOSTS = getenv('DJANGO_ALLOWED_HOSTS', None)

if EXTRA_ALLOWED_HOSTS is not None:
    assert isinstance(EXTRA_ALLOWED_HOSTS, str), 'DJANGO_ALLOWED_HOSTS must be a comma-separated list'
    try:
        EXTRA_ALLOWED_HOSTS = EXTRA_ALLOWED_HOSTS.split(',')
    except AttributeError:
        raise ImproperlyConfigured('DJANGO_ALLOWED_HOSTS must be a comma-separated list')
    ALLOWED_HOSTS.extend(EXTRA_ALLOWED_HOSTS)


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'rest_framework_simplejwt',
    'django_filters',
    'drf_spectacular',
    'django_celery_beat',
    'django_celery_results',

    'apps.clients',
    'apps.broadcasts',
]

MIDDLEWARE = [
    'core.middleware.HealthCheckMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.config(default='sqlite:///db.sqlite3', conn_max_age=600)
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

STATIC_ROOT = BASE_DIR / 'static'

MEDIA_URL = 'media/'

MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Rest framework
# https://www.django-rest-framework.org/api-guide/settings/

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_FILTER_BACKENDS': [
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
        'django_filters.rest_framework.DjangoFilterBackend'
    ],
    'DEFAULT_PAGINATION_CLASS': 'misc.api.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DATETIME_FORMAT': "%Y-%m-%d %H:%M:%S",
}

# Redis
#

REDIS_URL = getenv('REDIS_URL', f'redis://localhost:6379')


# Celery
# https://docs.celeryproject.org/en/stable/userguide/configuration.html

CELERY_BROKER_URL = f'{REDIS_URL}/2'
CELERY_RESULT_BACKEND = f'{REDIS_URL}/3'
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_DEFAULT_QUEUE = 'default'
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Celery beat
# https://docs.celeryproject.org/en/stable/userguide/periodic-tasks.html

CELERY_BEAT_SCHEDULE = {
    'schedule_messages': {
        'task': 'apps.broadcasts.tasks.schedule_messages',
        'schedule': crontab(minute='*'),
    },
    'send_messages': {
        'task': 'apps.broadcasts.tasks.send_messages',
        'schedule': timedelta(seconds=1),
    },
}

# Spectacular
# https://drf-spectacular.readthedocs.io/en/latest/settings.html

VERSION = getenv('VERSION', None)

SPECTACULAR_SETTINGS = {
    'TITLE': 'Notifications API',
    'DESCRIPTION': 'API for sending notifications to clients',
    'VERSION': VERSION,
    'SERVE_INCLUDE_SCHEMA': False,
}

# External API
# https://probe.fbrq.cloud/docs#/send/sendMsg

PROBE_URL = getenv('PROBE_URL', None)
PROBE_TOKEN = getenv('PROBE_TOKEN', None)

if not PROBE_URL or not PROBE_TOKEN:
    raise ImproperlyConfigured('PROBE_URL and PROBE_TOKEN must be set')

# Simple JWT
# https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html

ACCESS_TOKEN_LIFETIME = getenv('JWT_ACCESS_TOKEN_LIFETIME', 15)
REFRESH_TOKEN_LIFETIME = getenv('JWT_REFRESH_TOKEN_LIFETIME')

try:
    ACCESS_TOKEN_LIFETIME = int(ACCESS_TOKEN_LIFETIME)
    REFRESH_TOKEN_LIFETIME = int(ACCESS_TOKEN_LIFETIME) * 3
except ValueError:
    raise ImproperlyConfigured('JWT_ACCESS_TOKEN_LIFETIME and JWT_REFRESH_TOKEN_LIFETIME must be integers')
assert REFRESH_TOKEN_LIFETIME > ACCESS_TOKEN_LIFETIME,\
    'JWT_REFRESH_TOKEN_LIFETIME must be greater than JWT_ACCESS_TOKEN_LIFETIME'

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=ACCESS_TOKEN_LIFETIME),
    "REFRESH_TOKEN_LIFETIME": timedelta(minutes=REFRESH_TOKEN_LIFETIME),

    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
}
